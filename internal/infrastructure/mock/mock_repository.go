// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/port/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/payment-gateway/internal/domain/model"
)

// MockIPaymentRepository is a mock of IPaymentRepository interface.
type MockIPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentRepositoryMockRecorder
}

// MockIPaymentRepositoryMockRecorder is the mock recorder for MockIPaymentRepository.
type MockIPaymentRepositoryMockRecorder struct {
	mock *MockIPaymentRepository
}

// NewMockIPaymentRepository creates a new mock instance.
func NewMockIPaymentRepository(ctrl *gomock.Controller) *MockIPaymentRepository {
	mock := &MockIPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockIPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentRepository) EXPECT() *MockIPaymentRepositoryMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockIPaymentRepository) CreateSession(session model.Session) *model.DomainError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", session)
	ret0, _ := ret[0].(*model.DomainError)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockIPaymentRepositoryMockRecorder) CreateSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockIPaymentRepository)(nil).CreateSession), session)
}

// GetSessionById mocks base method.
func (m *MockIPaymentRepository) GetSessionById(sessionId string) (*model.Session, *model.DomainError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionById", sessionId)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(*model.DomainError)
	return ret0, ret1
}

// GetSessionById indicates an expected call of GetSessionById.
func (mr *MockIPaymentRepositoryMockRecorder) GetSessionById(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionById", reflect.TypeOf((*MockIPaymentRepository)(nil).GetSessionById), sessionId)
}

// IsSessionUnique mocks base method.
func (m *MockIPaymentRepository) IsSessionUnique(sessionID string) (bool, *model.DomainError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSessionUnique", sessionID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.DomainError)
	return ret0, ret1
}

// IsSessionUnique indicates an expected call of IsSessionUnique.
func (mr *MockIPaymentRepositoryMockRecorder) IsSessionUnique(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSessionUnique", reflect.TypeOf((*MockIPaymentRepository)(nil).IsSessionUnique), sessionID)
}

// UpdateSession mocks base method.
func (m *MockIPaymentRepository) UpdateSession(session model.Session) *model.DomainError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", session)
	ret0, _ := ret[0].(*model.DomainError)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockIPaymentRepositoryMockRecorder) UpdateSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockIPaymentRepository)(nil).UpdateSession), session)
}
